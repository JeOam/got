{
  "gop print": {
    "prefix": "gp",
    "body": [
      "gop.P($0)"
    ]
  },
  "got setup": {
    "prefix": "gsetup",
    "body": [
      "package ${0:example}_test",
      "",
      "import (",
      "\t\"testing\"",
      "\t\"time\"",
      "",
      "\t\"github.com/ysmood/got\"",
      "\t\"github.com/ysmood/gotrace\"",
      ")",
      "",
      "func init() {",
      "\t// Set default timeout for the entire \"go test\"",
      "\tgot.DefaultFlags(\"timeout=10s\")",
      "}",
      "",
      "func TestMain(m *testing.M) {",
      "\t// Make sure we don't leaking goroutines",
      "\tgotrace.CheckMain(m, 0)",
      "}",
      "",
      "var setup = got.Setup(func(g got.G) {",
      "\t// The function passed to it will be surely executed after the test",
      "\tg.Cleanup(func() {})",
      "",
      "\tif got.Parallel() > 0 {",
      "\t\t// Concurrently run each test",
      "\t\tg.Parallel()",
      "\t} else {",
      "\t\t// Make sure there's no goroutine leak for each test",
      "\t\tgotrace.Check(g, 0)",
      "\t}",
      "",
      "\t// Timeout for each test",
      "\tg.PanicAfter(time.Second)",
      "})",
      ""
    ]
  },
  "got test function": {
    "prefix": "gt",
    "body": [
      "",
      "func Test$1(t *testing.T) {",
      "\tg := got.T(t)",
      "",
      "\t${0:g.Eq(1, 1)}",
      "}",
      ""
    ]
  },
  "got test function with setup": {
    "prefix": "gts",
    "body": [
      "",
      "func Test$1(t *testing.T) {",
      "\tg := setup(t)",
      "",
      "\t${0:g.Eq(1, 1)}",
      "}",
      ""
    ]
  }
}
